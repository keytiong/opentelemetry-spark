/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2023,2024 Key Tiong TAN
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package io.opentelemetry.javaagent.instrumentation.spark;

import java.text.NumberFormat;

public class ApplicationId {

  public static final String appIdStrPrefix = "application_";
  private final long clusterTimestamp;
  private final int id;

  ApplicationId(long clusterTimestamp, int id) {
    this.clusterTimestamp = clusterTimestamp;
    this.id = id;
  }

  public static ApplicationId newInstance(long clusterTimestamp, int id) {
    return new ApplicationId(clusterTimestamp, id);
  }

  public int getId() {
    return id;
  }

  public long getClusterTimestamp() {
    return clusterTimestamp;
  }

  static final ThreadLocal<NumberFormat> appIdFormat =
      new ThreadLocal<NumberFormat>() {
        @Override
        public NumberFormat initialValue() {
          NumberFormat fmt = NumberFormat.getInstance();
          fmt.setGroupingUsed(false);
          fmt.setMinimumIntegerDigits(4);
          return fmt;
        }
      };

  @Override
  public String toString() {
    return appIdStrPrefix + this.getClusterTimestamp() + "_" + appIdFormat.get().format(getId());
  }

  @Override
  public int hashCode() {
    // Generated by eclipse.
    final int prime = 371237;
    int result = 6521;
    long clusterTimestamp = getClusterTimestamp();
    result = prime * result + (int) (clusterTimestamp ^ (clusterTimestamp >>> 32));
    result = prime * result + getId();
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass() != obj.getClass()) return false;
    ApplicationId other = (ApplicationId) obj;
    if (this.getClusterTimestamp() != other.getClusterTimestamp()) return false;
    if (this.getId() != other.getId()) return false;
    return true;
  }
}
